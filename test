from typing import Any, Dict, List, Text

from rasa_sdk import Action, Tracker
from rasa_sdk.events import SlotSet, EventType
from rasa_sdk.executor import CollectingDispatcher


class TestRepromptCountAction:
    def test_run_with_no_input_intent(self):
        action = RepromptCountAction()
        dispatcher = CollectingDispatcher()
        tracker = Tracker(
            "default",
            {"reprompt_count": 0},
            {"intent": {"name": "noInput"}},
            False,
            None,
            {},
            {"prev_action": "action_listen"},
        )
        domain = {}
        events = action.run(dispatcher, tracker, domain)
        assert events == [
            SlotSet("reprompt_count", 1),
            dispatcher.utter_message(response="utter_no_input_reprompt"),
        ]

    def test_run_with_no_match_intent(self):
        action = RepromptCountAction()
        dispatcher = CollectingDispatcher()
        tracker = Tracker(
            "default",
            {"reprompt_count": 0},
            {"intent": {"name": "noMatch"}},
            False,
            None,
            {},
            {"prev_action": "action_listen"},
        )
        domain = {}
        events = action.run(dispatcher, tracker, domain)
        assert events == [
            SlotSet("reprompt_count", 1),
            dispatcher.utter_message(response="utter_no_match_reprompt"),
        ]

    def test_run_with_other_intent(self):
        action = RepromptCountAction()
        dispatcher = CollectingDispatcher()
        tracker = Tracker(
            "default",
            {"reprompt_count": 0},
            {"intent": {"name": "greet"}},
            False,
            None,
            {},
            {"prev_action": "action_listen"},
        )
        domain = {}
        events = action.run(dispatcher, tracker, domain)
        assert events == [
            dispatcher.utter_message(response="utter_no_input_unconfirmed"),
            SlotSet("reprompt_count", 0),
        ]
